snippet cla "class <class_name> def initialize ... end end"
class ${1:class_name}
	def initialize(${2:*args})
		${0:${VISUAL:}}
	end
end
endsnippet

snippet mod "module"
module ${1:module_name}
	${0:${VISUAL:}}
end
endsnippet

snippet req "require <file>"
require "${1}"
endsnippet

snippet reqd "require_dependency <file>"
require "${1}"
endsnippet

snippet sh "require spec_helper"
require "spec_helper"
endsnippet

snippet spec "spec scaffold"
require "spec_helper"
require "`!v SpecDescribedClassPath()`"

describe `!v SpecDescribedClass()` do
	$0
end
endsnippet

snippet ch "require controller_helper"
require "controller_helper"
$0
endsnippet

snippet cspec "Rails Controller spec scaffold"
require "controller_helper"

describe `!v SpecDescribedClass()` do
	$0
end
endsnippet

snippet rh "require rails_helper"
require "rails_helper"
$0
endsnippet

snippet rspec "Rails spec scaffold"
require "rails_helper"

describe `!v SpecDescribedClass()` do
	$0
end
endsnippet

snippet fh "require feature_spec_helper"
require "feature_spec_helper"
$0
endsnippet

snippet feat "feature spec scaffold"
require "feature_spec_helper"

feature "`!v DefaultFeatureTitle()`" do
	$0
end
endsnippet

snippet con "rspec: context block"
context "$1" do
	${0:${VISUAL:# assertions...}}
end
endsnippet

snippet des "Describe"
describe "${1:subject}" do
	$0
end
endsnippet

snippet desf "Describe using file name"
describe `!v rails#camelize(expand("%:t:r"))` do
	$0
end
endsnippet

snippet it "rspec: it"
it "${1:does something}"${2: do
	$3
end}
endsnippet

snippet def "def <name>..."
def ${1:method_name}${2:(${3:*args})}
	$0
end
endsnippet

snippet defi "def initialize ..."
def initialize${1:(${2:*args})}
	$0
end
endsnippet

snippet "\b(r|attr)" "attr_reader :<attr_names>" r
attr_reader :${0:attr_names}
endsnippet
